// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.68.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

abstract class Native {
  ///
  /// Public interface
  ///
  Stream<String> connectLogger({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectLoggerConstMeta;

  Future<String> publicKeyToEthereumAddress(
      {required String publicKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPublicKeyToEthereumAddressConstMeta;

  Future<String> privateKeyToPublicKey(
      {required String privateKey, required bool compressed, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrivateKeyToPublicKeyConstMeta;

  Future<String> privateKeyToEthereumAddress(
      {required String privateKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrivateKeyToEthereumAddressConstMeta;

  Future<String> transactionToMessageHash(
      {required String txRequest, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTransactionToMessageHashConstMeta;

  Future<String> messageToHash({required String data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMessageToHashConstMeta;

  Future<String> encodeMessageSignature(
      {required String messageHash,
      required int chainId,
      required String signatureRecid,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncodeMessageSignatureConstMeta;

  Future<Uint8List> encodeTransaction(
      {required String txRequest,
      required String signatureRecid,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncodeTransactionConstMeta;

  Future<KeygenResult> keygen({required KeygenParams params, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kKeygenConstMeta;

  Future<SignResult> sign({required SignParams params, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignConstMeta;
}

class KeygenParams {
  final String roomId;
  final int participantIndex;
  final int participantsCount;
  final int participantsThreshold;
  final String relayAddress;
  final int timeoutSeconds;

  const KeygenParams({
    required this.roomId,
    required this.participantIndex,
    required this.participantsCount,
    required this.participantsThreshold,
    required this.relayAddress,
    required this.timeoutSeconds,
  });
}

class KeygenResult {
  final String? key;
  final String? error;

  const KeygenResult({
    this.key,
    this.error,
  });
}

class SignParams {
  final String roomId;
  final String key;
  final String data;
  final Uint16List participantsIndexes;
  final String relayAddress;
  final int timeoutSeconds;

  const SignParams({
    required this.roomId,
    required this.key,
    required this.data,
    required this.participantsIndexes,
    required this.relayAddress,
    required this.timeoutSeconds,
  });
}

class SignResult {
  final String? result;
  final String? error;

  const SignResult({
    this.result,
    this.error,
  });
}
