// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Stream<String> connectLogger({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect_logger(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kConnectLoggerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectLoggerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_logger",
        argNames: [],
      );

  Future<String> publicKeyToEthereumAddress(
      {required String publicKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(publicKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_public_key_to_ethereum_address(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kPublicKeyToEthereumAddressConstMeta,
      argValues: [publicKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPublicKeyToEthereumAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "public_key_to_ethereum_address",
        argNames: ["publicKey"],
      );

  Future<String> privateKeyToPublicKey(
      {required String privateKey, required bool compressed, dynamic hint}) {
    var arg0 = _platform.api2wire_String(privateKey);
    var arg1 = compressed;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_private_key_to_public_key(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kPrivateKeyToPublicKeyConstMeta,
      argValues: [privateKey, compressed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrivateKeyToPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "private_key_to_public_key",
        argNames: ["privateKey", "compressed"],
      );

  Future<String> privateKeyToEthereumAddress(
      {required String privateKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(privateKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_private_key_to_ethereum_address(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kPrivateKeyToEthereumAddressConstMeta,
      argValues: [privateKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrivateKeyToEthereumAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "private_key_to_ethereum_address",
        argNames: ["privateKey"],
      );

  Future<String> transactionToMessageHash(
      {required String txRequest, dynamic hint}) {
    var arg0 = _platform.api2wire_String(txRequest);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_transaction_to_message_hash(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kTransactionToMessageHashConstMeta,
      argValues: [txRequest],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTransactionToMessageHashConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "transaction_to_message_hash",
        argNames: ["txRequest"],
      );

  Future<String> messageToHash({required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_message_to_hash(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMessageToHashConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMessageToHashConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "message_to_hash",
        argNames: ["data"],
      );

  Future<String> encodeMessageSignature(
      {required String messageHash,
      required int chainId,
      required String signatureRecid,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(messageHash);
    var arg1 = api2wire_u32(chainId);
    var arg2 = _platform.api2wire_String(signatureRecid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_encode_message_signature(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kEncodeMessageSignatureConstMeta,
      argValues: [messageHash, chainId, signatureRecid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEncodeMessageSignatureConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encode_message_signature",
        argNames: ["messageHash", "chainId", "signatureRecid"],
      );

  Future<Uint8List> encodeTransaction(
      {required String txRequest,
      required String signatureRecid,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(txRequest);
    var arg1 = _platform.api2wire_String(signatureRecid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_encode_transaction(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kEncodeTransactionConstMeta,
      argValues: [txRequest, signatureRecid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEncodeTransactionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encode_transaction",
        argNames: ["txRequest", "signatureRecid"],
      );

  Future<KeygenResult> keygen({required KeygenParams params, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keygen_params(params);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_keygen(port_, arg0),
      parseSuccessData: _wire2api_keygen_result,
      constMeta: kKeygenConstMeta,
      argValues: [params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kKeygenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "keygen",
        argNames: ["params"],
      );

  Future<SignResult> sign({required SignParams params, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_sign_params(params);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sign(port_, arg0),
      parseSuccessData: _wire2api_sign_result,
      constMeta: kSignConstMeta,
      argValues: [params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign",
        argNames: ["params"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  KeygenResult _wire2api_keygen_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeygenResult(
      key: _wire2api_opt_String(arr[0]),
      error: _wire2api_opt_String(arr[1]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  SignResult _wire2api_sign_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SignResult(
      result: _wire2api_opt_String(arr[0]),
      error: _wire2api_opt_String(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
