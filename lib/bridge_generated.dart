// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.51.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class Native {
  Stream<String> connectLogger({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectLoggerConstMeta;

  Future<String> toPublicKey(
      {required String key, required bool compressed, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToPublicKeyConstMeta;

  Future<String> toEthereumAddress({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToEthereumAddressConstMeta;

  Future<String> toMessageHash({required String txRequest, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToMessageHashConstMeta;

  Future<String> convertToEthersSignature(
      {required String txRequest, required String signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConvertToEthersSignatureConstMeta;

  Future<Uint8List> encodeTransaction(
      {required String txRequest, required String signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncodeTransactionConstMeta;

  Future<KeygenResult> keygen({required KeygenParams params, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kKeygenConstMeta;

  Future<SignResult> sign({required SignParams params, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignConstMeta;
}

class KeygenParams {
  final String roomId;
  final int participantIndex;
  final int participantsCount;
  final int participantsThreshold;
  final String relayAddress;
  final int timeoutSeconds;

  KeygenParams({
    required this.roomId,
    required this.participantIndex,
    required this.participantsCount,
    required this.participantsThreshold,
    required this.relayAddress,
    required this.timeoutSeconds,
  });
}

class KeygenResult {
  final String? key;
  final String? error;

  KeygenResult({
    this.key,
    this.error,
  });
}

class SignParams {
  final String roomId;
  final String key;
  final String data;
  final Uint16List participantsIndexes;
  final String relayAddress;
  final int timeoutSeconds;

  SignParams({
    required this.roomId,
    required this.key,
    required this.data,
    required this.participantsIndexes,
    required this.relayAddress,
    required this.timeoutSeconds,
  });
}

class SignResult {
  final String? result;
  final String? error;

  SignResult({
    this.result,
    this.error,
  });
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Stream<String> connectLogger({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect_logger(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kConnectLoggerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectLoggerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_logger",
        argNames: [],
      );

  Future<String> toPublicKey(
      {required String key, required bool compressed, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    var arg1 = compressed;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_to_public_key(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kToPublicKeyConstMeta,
      argValues: [key, compressed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_public_key",
        argNames: ["key", "compressed"],
      );

  Future<String> toEthereumAddress({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_to_ethereum_address(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kToEthereumAddressConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToEthereumAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_ethereum_address",
        argNames: ["key"],
      );

  Future<String> toMessageHash({required String txRequest, dynamic hint}) {
    var arg0 = _platform.api2wire_String(txRequest);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_to_message_hash(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kToMessageHashConstMeta,
      argValues: [txRequest],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToMessageHashConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_message_hash",
        argNames: ["txRequest"],
      );

  Future<String> convertToEthersSignature(
      {required String txRequest, required String signature, dynamic hint}) {
    var arg0 = _platform.api2wire_String(txRequest);
    var arg1 = _platform.api2wire_String(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_convert_to_ethers_signature(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kConvertToEthersSignatureConstMeta,
      argValues: [txRequest, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConvertToEthersSignatureConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "convert_to_ethers_signature",
        argNames: ["txRequest", "signature"],
      );

  Future<Uint8List> encodeTransaction(
      {required String txRequest, required String signature, dynamic hint}) {
    var arg0 = _platform.api2wire_String(txRequest);
    var arg1 = _platform.api2wire_String(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_encode_transaction(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kEncodeTransactionConstMeta,
      argValues: [txRequest, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEncodeTransactionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encode_transaction",
        argNames: ["txRequest", "signature"],
      );

  Future<KeygenResult> keygen({required KeygenParams params, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keygen_params(params);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_keygen(port_, arg0),
      parseSuccessData: _wire2api_keygen_result,
      constMeta: kKeygenConstMeta,
      argValues: [params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kKeygenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "keygen",
        argNames: ["params"],
      );

  Future<SignResult> sign({required SignParams params, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_sign_params(params);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sign(port_, arg0),
      parseSuccessData: _wire2api_sign_result,
      constMeta: kSignConstMeta,
      argValues: [params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign",
        argNames: ["params"],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  KeygenResult _wire2api_keygen_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeygenResult(
      key: _wire2api_opt_String(arr[0]),
      error: _wire2api_opt_String(arr[1]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  SignResult _wire2api_sign_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SignResult(
      result: _wire2api_opt_String(arr[0]),
      error: _wire2api_opt_String(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_KeygenParams> api2wire_box_autoadd_keygen_params(
      KeygenParams raw) {
    final ptr = inner.new_box_autoadd_keygen_params_0();
    _api_fill_to_wire_keygen_params(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SignParams> api2wire_box_autoadd_sign_params(
      SignParams raw) {
    final ptr = inner.new_box_autoadd_sign_params_0();
    _api_fill_to_wire_sign_params(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_16_list> api2wire_uint_16_list(Uint16List raw) {
    final ans = inner.new_uint_16_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_keygen_params(
      KeygenParams apiObj, ffi.Pointer<wire_KeygenParams> wireObj) {
    _api_fill_to_wire_keygen_params(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sign_params(
      SignParams apiObj, ffi.Pointer<wire_SignParams> wireObj) {
    _api_fill_to_wire_sign_params(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_keygen_params(
      KeygenParams apiObj, wire_KeygenParams wireObj) {
    wireObj.room_id = api2wire_String(apiObj.roomId);
    wireObj.participant_index = api2wire_u16(apiObj.participantIndex);
    wireObj.participants_count = api2wire_u16(apiObj.participantsCount);
    wireObj.participants_threshold = api2wire_u16(apiObj.participantsThreshold);
    wireObj.relay_address = api2wire_String(apiObj.relayAddress);
    wireObj.timeout_seconds = api2wire_u16(apiObj.timeoutSeconds);
  }

  void _api_fill_to_wire_sign_params(
      SignParams apiObj, wire_SignParams wireObj) {
    wireObj.room_id = api2wire_String(apiObj.roomId);
    wireObj.key = api2wire_String(apiObj.key);
    wireObj.data = api2wire_String(apiObj.data);
    wireObj.participants_indexes =
        api2wire_uint_16_list(apiObj.participantsIndexes);
    wireObj.relay_address = api2wire_String(apiObj.relayAddress);
    wireObj.timeout_seconds = api2wire_u16(apiObj.timeoutSeconds);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_connect_logger(
    int port_,
  ) {
    return _wire_connect_logger(
      port_,
    );
  }

  late final _wire_connect_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_connect_logger');
  late final _wire_connect_logger =
      _wire_connect_loggerPtr.asFunction<void Function(int)>();

  void wire_to_public_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    bool _compressed,
  ) {
    return _wire_to_public_key(
      port_,
      key,
      _compressed,
    );
  }

  late final _wire_to_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_to_public_key');
  late final _wire_to_public_key = _wire_to_public_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_to_ethereum_address(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_to_ethereum_address(
      port_,
      key,
    );
  }

  late final _wire_to_ethereum_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_to_ethereum_address');
  late final _wire_to_ethereum_address = _wire_to_ethereum_addressPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_to_message_hash(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx_request,
  ) {
    return _wire_to_message_hash(
      port_,
      tx_request,
    );
  }

  late final _wire_to_message_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_to_message_hash');
  late final _wire_to_message_hash = _wire_to_message_hashPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_convert_to_ethers_signature(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx_request,
    ffi.Pointer<wire_uint_8_list> signature,
  ) {
    return _wire_convert_to_ethers_signature(
      port_,
      tx_request,
      signature,
    );
  }

  late final _wire_convert_to_ethers_signaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_convert_to_ethers_signature');
  late final _wire_convert_to_ethers_signature =
      _wire_convert_to_ethers_signaturePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_encode_transaction(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx_request,
    ffi.Pointer<wire_uint_8_list> signature,
  ) {
    return _wire_encode_transaction(
      port_,
      tx_request,
      signature,
    );
  }

  late final _wire_encode_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_encode_transaction');
  late final _wire_encode_transaction = _wire_encode_transactionPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_keygen(
    int port_,
    ffi.Pointer<wire_KeygenParams> params,
  ) {
    return _wire_keygen(
      port_,
      params,
    );
  }

  late final _wire_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_KeygenParams>)>>('wire_keygen');
  late final _wire_keygen = _wire_keygenPtr
      .asFunction<void Function(int, ffi.Pointer<wire_KeygenParams>)>();

  void wire_sign(
    int port_,
    ffi.Pointer<wire_SignParams> params,
  ) {
    return _wire_sign(
      port_,
      params,
    );
  }

  late final _wire_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_SignParams>)>>('wire_sign');
  late final _wire_sign = _wire_signPtr
      .asFunction<void Function(int, ffi.Pointer<wire_SignParams>)>();

  ffi.Pointer<wire_KeygenParams> new_box_autoadd_keygen_params_0() {
    return _new_box_autoadd_keygen_params_0();
  }

  late final _new_box_autoadd_keygen_params_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_KeygenParams> Function()>>(
          'new_box_autoadd_keygen_params_0');
  late final _new_box_autoadd_keygen_params_0 =
      _new_box_autoadd_keygen_params_0Ptr
          .asFunction<ffi.Pointer<wire_KeygenParams> Function()>();

  ffi.Pointer<wire_SignParams> new_box_autoadd_sign_params_0() {
    return _new_box_autoadd_sign_params_0();
  }

  late final _new_box_autoadd_sign_params_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SignParams> Function()>>(
          'new_box_autoadd_sign_params_0');
  late final _new_box_autoadd_sign_params_0 = _new_box_autoadd_sign_params_0Ptr
      .asFunction<ffi.Pointer<wire_SignParams> Function()>();

  ffi.Pointer<wire_uint_16_list> new_uint_16_list_0(
    int len,
  ) {
    return _new_uint_16_list_0(
      len,
    );
  }

  late final _new_uint_16_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_16_list> Function(
              ffi.Int32)>>('new_uint_16_list_0');
  late final _new_uint_16_list_0 = _new_uint_16_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_16_list> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_KeygenParams extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> room_id;

  @ffi.Uint16()
  external int participant_index;

  @ffi.Uint16()
  external int participants_count;

  @ffi.Uint16()
  external int participants_threshold;

  external ffi.Pointer<wire_uint_8_list> relay_address;

  @ffi.Uint16()
  external int timeout_seconds;
}

class wire_uint_16_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> ptr;

  @ffi.Int32()
  external int len;
}

class wire_SignParams extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> room_id;

  external ffi.Pointer<wire_uint_8_list> key;

  external ffi.Pointer<wire_uint_8_list> data;

  external ffi.Pointer<wire_uint_16_list> participants_indexes;

  external ffi.Pointer<wire_uint_8_list> relay_address;

  @ffi.Uint16()
  external int timeout_seconds;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
