#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.51.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_to_public_key_impl(
    port_: MessagePort,
    key: impl Wire2Api<String> + UnwindSafe,
    compressed: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "to_public_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            let api_compressed = compressed.wire2api();
            move |task_callback| to_public_key(api_key, api_compressed)
        },
    )
}
fn wire_to_ethereum_address_impl(port_: MessagePort, key: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "to_ethereum_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            move |task_callback| to_ethereum_address(api_key)
        },
    )
}
fn wire_message_to_hash_impl(port_: MessagePort, message: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "message_to_hash",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message = message.wire2api();
            move |task_callback| message_to_hash(api_message)
        },
    )
}
fn wire_to_ethereum_signature_impl(
    port_: MessagePort,
    message: impl Wire2Api<String> + UnwindSafe,
    signature: impl Wire2Api<String> + UnwindSafe,
    chain: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "to_ethereum_signature",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message = message.wire2api();
            let api_signature = signature.wire2api();
            let api_chain = chain.wire2api();
            move |task_callback| to_ethereum_signature(api_message, api_signature, api_chain)
        },
    )
}
fn wire_connect_logger_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connect_logger",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| connect_logger(task_callback.stream_sink()),
    )
}
fn wire_get_next_id_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_next_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_next_id(),
    )
}
fn wire_initialize_impl(port_: MessagePort, id: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "initialize",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| initialize(task_callback.stream_sink(), api_id)
        },
    )
}
fn wire_receive_impl(
    port_: MessagePort,
    id: impl Wire2Api<u32> + UnwindSafe,
    value: impl Wire2Api<IncomingMessage> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "receive",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            let api_value = value.wire2api();
            move |task_callback| receive(api_id, api_value)
        },
    )
}
fn wire_to_message_hash_impl(port_: MessagePort, tx_request: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "to_message_hash",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_tx_request = tx_request.wire2api();
            move |task_callback| to_message_hash(api_tx_request)
        },
    )
}
fn wire_convert_to_ethers_signature_impl(
    port_: MessagePort,
    tx_request: impl Wire2Api<String> + UnwindSafe,
    signature: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "convert_to_ethers_signature",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_tx_request = tx_request.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| convert_to_ethers_signature(api_tx_request, api_signature)
        },
    )
}
fn wire_encode_transaction_impl(
    port_: MessagePort,
    tx_request: impl Wire2Api<String> + UnwindSafe,
    signature: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "encode_transaction",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_tx_request = tx_request.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| encode_transaction(api_tx_request, api_signature)
        },
    )
}
fn wire_critical__static_method__OutgoingMessage_impl(
    port_: MessagePort,
    message: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "critical__static_method__OutgoingMessage",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message = message.wire2api();
            move |task_callback| Ok(OutgoingMessage::critical(api_message))
        },
    )
}
fn wire_invalid__static_method__OutgoingMessage_impl(
    port_: MessagePort,
    message: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "invalid__static_method__OutgoingMessage",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message = message.wire2api();
            move |task_callback| Ok(OutgoingMessage::invalid(api_message))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<u16> for *mut u16 {
    fn wire2api(self) -> u16 {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for ErrCode {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Internal => 0,
            Self::InvalidMessage => 1,
            Self::Critical => 2,
        }
        .into_dart()
    }
}

impl support::IntoDart for OutgoingMessage {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Start => vec![0.into_dart()],
            Self::Ready => vec![1.into_dart()],
            Self::Issue { code, message } => {
                vec![2.into_dart(), code.into_dart(), message.into_dart()]
            }
            Self::Communication { packet } => vec![3.into_dart(), packet.into_dart()],
            Self::Result { encoded } => vec![4.into_dart(), encoded.into_dart()],
            Self::Close => vec![5.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OutgoingMessage {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
