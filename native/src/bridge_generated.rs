#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_create_outgoing_stream(port_: i64, id: u32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_outgoing_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| create_outgoing_stream(task_callback.stream_sink(), api_id)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_close_outgoin_stream(port_: i64, id: u32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "close_outgoin_stream",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Ok(close_outgoin_stream(api_id))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_sign(
    port_: i64,
    id: u32,
    key: *mut wire_uint_8_list,
    parties: *mut wire_uint_16_list,
    index: u16,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sign",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            let api_key = key.wire2api();
            let api_parties = parties.wire2api();
            let api_index = index.wire2api();
            move |task_callback| sign(api_id, api_key, api_parties, api_index)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_multiply_incoming(port_: i64, id: u32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "multiply_incoming",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| multiply_incoming(api_id)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_send_incoming(port_: i64, id: u32, value: *mut wire_IncomingMessage) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_incoming",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            let api_value = value.wire2api();
            move |task_callback| send_incoming(api_id, api_value)
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_16_list {
    ptr: *mut u16,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_IncomingMessage {
    tag: i32,
    kind: *mut IncomingMessageKind,
}

#[repr(C)]
pub union IncomingMessageKind {
    Msg: *mut wire_IncomingMessage_Msg,
    Multiply: *mut wire_IncomingMessage_Multiply,
    Close: *mut wire_IncomingMessage_Close,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_IncomingMessage_Msg {
    field0: *mut wire_uint_8_list,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_IncomingMessage_Multiply {
    field0: u32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_IncomingMessage_Close {}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_box_autoadd_incoming_message_0() -> *mut wire_IncomingMessage {
    support::new_leak_box_ptr(wire_IncomingMessage::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_uint_16_list_0(len: i32) -> *mut wire_uint_16_list {
    let ans = wire_uint_16_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<IncomingMessage> for *mut wire_IncomingMessage {
    fn wire2api(self) -> IncomingMessage {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        Wire2Api::<IncomingMessage>::wire2api(*wrap).into()
    }
}

impl Wire2Api<IncomingMessage> for wire_IncomingMessage {
    fn wire2api(self) -> IncomingMessage {
        match self.tag {
            0 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.Msg);
                IncomingMessage::Msg(ans.field0.wire2api())
            },
            1 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.Multiply);
                IncomingMessage::Multiply(ans.field0.wire2api())
            },
            2 => IncomingMessage::Close,
            _ => unreachable!(),
        }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u16>> for *mut wire_uint_16_list {
    fn wire2api(self) -> Vec<u16> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

impl NewWithNullPtr for wire_IncomingMessage {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}

#[no_mangle]
pub extern "C" fn inflate_IncomingMessage_Msg() -> *mut IncomingMessageKind {
    support::new_leak_box_ptr(IncomingMessageKind {
        Msg: support::new_leak_box_ptr(wire_IncomingMessage_Msg {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn inflate_IncomingMessage_Multiply() -> *mut IncomingMessageKind {
    support::new_leak_box_ptr(IncomingMessageKind {
        Multiply: support::new_leak_box_ptr(wire_IncomingMessage_Multiply {
            field0: Default::default(),
        }),
    })
}

// Section: impl IntoDart

impl support::IntoDart for OutgoingMessage {
    fn into_dart(self) -> support::DartCObject {
        match self {
            Self::Msg(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Multiply(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::Close => vec![2.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OutgoingMessage {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
