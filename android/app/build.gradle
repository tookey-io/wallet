def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.flutter_rust_bridge_template"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

[
    new Tuple2('Debug', ''),
    new Tuple2('Profile', '--release'),
    new Tuple2('Release', '--release')
].each {
    def taskPostfix = it.first
    def profileMode = it.second
    tasks.whenTaskAdded { task ->
        if (task.name == "javaPreCompile$taskPostfix") {
            task.dependsOn "cargoBuild$taskPostfix"
        }
    }
    tasks.register("cargoBuild$taskPostfix", Exec) {
        commandLine 'zsh', '-c', """cd ../../native && \
            ARMV7_LINUX_ANDROIDEABI_OPENSSL_LIB_DIR=/Users/aler/crypto/tookey/vendor/openssl-android-armeabi-v7a/lib \
            ARMV7_LINUX_ANDROIDEABI_OPENSSL_INCLUDE_DIR=/Users/aler/crypto/tookey/vendor/openssl-android-armeabi-v7a/include \
            AARCH64_LINUX_ANDROID_OPENSSL_LIB_DIR=/Users/aler/crypto/tookey/vendor/openssl-android-arm64-v8a/lib \
            AARCH64_LINUX_ANDROID_OPENSSL_INCLUDE_DIR=/Users/aler/crypto/tookey/vendor/openssl-android-arm64-v8a/include \
            I686_LINUX_ANDROID_OPENSSL_LIB_DIR=/Users/aler/crypto/tookey/vendor/openssl-android-x86/lib \
            I686_LINUX_ANDROID_OPENSSL_INCLUDE_DIR=/Users/aler/crypto/tookey/vendor/openssl-android-x86/include \
            X86_64_LINUX_ANDROID_OPENSSL_LIB_DIR=/Users/aler/crypto/tookey/vendor/openssl-android-x86_64/lib \
            X86_64_LINUX_ANDROID_OPENSSL_INCLUDE_DIR=/Users/aler/crypto/tookey/vendor/openssl-android-x86_64/include \
            cargo ndk \
            -t arm64-v8a \
            -o ../android/app/src/main/jniLibs build $profileMode"""
    }
    // -t armeabi-v7a -t arm64-v8a -t x86 -t x86_64 \
}

